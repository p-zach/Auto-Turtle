{"version":3,"sources":["Canvas.js","Checkbox.js","TurtleForm.js","Header.js","App.js","index.js"],"names":["Canvas","props","state","points","x","y","canvasRef","React","createRef","e","m","nativeEvent","this","drawLine","length","offsetX","offsetY","addPoint","pts","setState","ix","iy","context","getContext","fillStyle","beginPath","moveTo","lineTo","stroke","increasing","startFromEnd","initLength","scalar","r","angle","i","center","newPoint","rotateCenter","scaleCenter","push","point","degrees","aboutOrigin","rotated","rotateOrigin","rads","Math","PI","sin","cos","scaled","scaleOrigin","clearRect","current","ref","width","height","onMouseDown","handleMouseDown","Component","Checkbox","label","isSelected","onCheckboxChange","type","name","checked","onChange","OPTIONS","TurtleForm","checkboxes","reduce","options","option","handleCheckboxChange","changeEvent","target","prevState","map","createCheckbox","onSubmit","onTurtleSubmit","createForm","onResetSubmit","Header","class","App","formSubmitEvent","preventDefault","repeat","clear","console","log","handleTurtleFormSubmit","handleResetFormSubmit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93bab8b2.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n/**\r\n * Renders and updates the HTML canvas.\r\n */\r\nclass Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            points: [{ x: 250, y: 250 }]\r\n        }\r\n\r\n        this.canvasRef = React.createRef()\r\n    }\r\n\r\n    /**\r\n     * Handles mouse clicks on the canvas.\r\n     * @param {React.MouseEvent} e \r\n     */\r\n    handleMouseDown(e) {\r\n        let m = e.nativeEvent\r\n        const points = this.state.points\r\n        this.drawLine(points[points.length - 1].x, points[points.length - 1].y, m.offsetX, m.offsetY)\r\n        this.addPoint(m.offsetX, m.offsetY)\r\n    }\r\n\r\n    /**\r\n     * Adds the specified point to the state's point list.\r\n     * @param {Number} x - The X coordinate of the point to be added.\r\n     * @param {Number} y - The Y coordinate of the point to be added.\r\n     */\r\n    addPoint(x, y) {\r\n        const pts = this.state.points\r\n        this.setState({\r\n            points: [...pts, { x: x, y: y }]\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Draws a line between two points.\r\n     * @param {Number} ix - The starting X coordinate for the line.\r\n     * @param {Number} iy - The starting Y coordinate for the line.\r\n     * @param {Number} x - The ending X coordinate for the line.\r\n     * @param {Number} y - The ending Y coordinate for the line.\r\n     */\r\n    drawLine(ix, iy, x, y) {\r\n        const context = this.getContext()\r\n        context.fillStyle = \"#000000\"\r\n        context.beginPath()\r\n        context.moveTo(ix, iy)\r\n        context.lineTo(x, y)\r\n        context.stroke()\r\n    }\r\n    \r\n    /**\r\n     * Radially repeats the drawn pattern 6 times.\r\n     * @param {Boolean} increasing - Whether the pattern should increase in size as it is copied.\r\n     * @param {boolean} startFromEnd - Whether the pattern should begin from the end of the initial drawing.\r\n     */\r\n    repeat(increasing, startFromEnd) {\r\n        const rots = 6\r\n        let points = this.state.points\r\n        const initLength = points.length\r\n        let scalar = 1\r\n\r\n        // return if the number of points is too high\r\n        if (initLength > 200)\r\n            return\r\n\r\n        // Repeat 5 times:\r\n        for (var r = 1; r < rots; r++)\r\n        {\r\n            // find the angle in degrees of this copy\r\n            let angle = r / rots * 360\r\n            // copy all of the points\r\n            for (var i = 0; i < initLength; i++)\r\n            {\r\n                // get the origin point for rotation\r\n                let center = startFromEnd ? points[initLength - 1] : points[0]\r\n                // rotate the original drawn point around the origin by the calculated amount\r\n                let newPoint = this.rotateCenter(points[i], center, angle)\r\n                // scale the point if increase was checked\r\n                if (increasing)\r\n                    newPoint = this.scaleCenter(newPoint, center, scalar)\r\n                if (i > 0)\r\n                {\r\n                    // draw a line connecting this point with the previous\r\n                    this.drawLine(points[points.length - 1].x, points[points.length - 1].y, newPoint.x, newPoint.y)\r\n                }\r\n                // add the new point to the local point list\r\n                points.push({ x: newPoint.x, y: newPoint.y })\r\n            }\r\n            // increase the scalar for next copy\r\n            scalar += .5\r\n        }\r\n        // set the state after done since setState is async\r\n        this.setState({\r\n            points: points\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Rotates the specified point around an origin by the specified amount.\r\n     * @param {Object} point - The point to rotate.\r\n     * @param {Object} center - The origin point around which the specified point should be rotated.\r\n     * @param {Number} degrees - The number of degrees to rotate the point by.\r\n     * @returns The rotated point.\r\n     */\r\n    rotateCenter(point, center, degrees) {\r\n        // translates point so it's relative to 0,0\r\n        const aboutOrigin = { x: point.x - center.x, y: point.y - center.y }\r\n        // rotates the translated point around 0,0\r\n        const rotated = this.rotateOrigin(aboutOrigin, degrees)\r\n        // returns the 0,0-rotated point plus the original offset\r\n        return { x: rotated.x + center.x, y: rotated.y + center.y } \r\n    }\r\n\r\n    /**\r\n     * Rotates the specified point around 0,0.\r\n     * @param {Object} point - The point to rotate around the origin.\r\n     * @param {Number} degrees - The number of degrees to rotate the point by.\r\n     * @returns The rotated point.\r\n     */\r\n    rotateOrigin(point, degrees) {\r\n        const rads = degrees * Math.PI / 180\r\n        const sin = Math.sin(rads)\r\n        const cos = Math.cos(rads)\r\n        // point rotation about origin: (xcos(a) - ysin(a), xsin(a) + ycos(a))\r\n        return { x: point.x * cos - point.y * sin, y: point.x * sin + point.y * cos }\r\n    }\r\n\r\n    /**\r\n     * Scales the specified point from an origin by the specified amount.\r\n     * @param {Object} point - The point to scale.\r\n     * @param {Object} center - The origin point around which the specified point should be scaled.\r\n     * @param {Number} scalar - The factor to scale the point by.\r\n     * @returns The scaled point.\r\n     */\r\n    scaleCenter(point, center, scalar) {\r\n        // translates point so it's relative to 0,0\r\n        const aboutOrigin = { x: point.x - center.x, y: point.y - center.y }\r\n        // scales the translated point from 0,0\r\n        const scaled = this.scaleOrigin(aboutOrigin, scalar)\r\n        // returns the 0,0-scaled point plus the original offset\r\n        return { x: scaled.x + center.y, y: scaled.y + center.y }\r\n    }\r\n\r\n    /**\r\n     * Scales the specified point from 0,0.\r\n     * @param {Object} point - The point to scale from the origin.\r\n     * @param {Number} scalar - The factor to scale the point by.\r\n     * @returns The scaled point.\r\n     */\r\n    scaleOrigin(point, scalar) {\r\n        return { x: point.x * scalar, y: point.y * scalar }\r\n    }\r\n\r\n    /**\r\n     * Clears the canvas.\r\n     */\r\n    clear() {\r\n        // clears the point list\r\n        this.setState({\r\n            points: [{ x: 250, y: 250 }]\r\n        })\r\n        // wipes the canvas\r\n        this.getContext().clearRect(0, 0, 500, 500)\r\n    }\r\n\r\n    /**\r\n     * @returns The canvas's context object.\r\n     */\r\n    getContext() {\r\n        return this.canvasRef.current.getContext(\"2d\")\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas ref={this.canvasRef} width=\"500\" height=\"500\" \r\n                onMouseDown={e => this.handleMouseDown(e)}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Canvas","import React from \"react\";\r\n\r\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\r\n  <div>\r\n    <label>\r\n      <input\r\n        type=\"checkbox\"\r\n        name={label}\r\n        checked={isSelected}\r\n        onChange={onCheckboxChange}\r\n      />\r\n      {label}\r\n    </label>\r\n  </div>\r\n);\r\n\r\nexport default Checkbox","import React from \"react\"\r\nimport Checkbox from \"./Checkbox\"\r\n\r\nconst OPTIONS = [\"Increase\", \"Start from end\"]\r\n\r\n/**\r\n * Renders and updates the HTML form for the turtle options.\r\n */\r\nclass TurtleForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.state = {\r\n            // transforms [\"option1, option2\"] to [\"option1\": false, \"option2\": false]\r\n            checkboxes: OPTIONS.reduce(\r\n                (options, option) => ({\r\n                    ...options,\r\n                    [option]: false\r\n                }),\r\n                {}\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a checkbox for the specified label.\r\n     * @param {String} option - The text label for the checkbox.\r\n     * @returns The rendered checkbox.\r\n     */\r\n    createCheckbox(option) {\r\n        return (\r\n            <Checkbox \r\n                label={option}\r\n                isSelected={this.state.checkboxes[option]}\r\n                onCheckboxChange={e => this.handleCheckboxChange(e)}\r\n                key={option}\r\n            />\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Updates the clicked checkbox.\r\n     * @param {React.ChangeEvent} changeEvent\r\n     */\r\n    handleCheckboxChange(changeEvent) {\r\n        const { name } = changeEvent.target\r\n\r\n        // changes the state of the clicked checkbox (to checked or unchecked) while preserving the others' states\r\n        this.setState(prevState => ({\r\n            checkboxes: {\r\n                ...prevState.checkboxes,\r\n                [name]: !prevState.checkboxes[name]\r\n            }\r\n        }))\r\n    }\r\n\r\n    /**\r\n     * Creates a checkbox for each option.\r\n     * @returns The rendered checkboxes.\r\n     */\r\n    createForm() {\r\n        return OPTIONS.map(option => this.createCheckbox(option))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={e => this.props.onTurtleSubmit(e)}>\r\n                    {this.createForm()}\r\n\r\n                    <button type=\"submit\">\r\n                        Turtle!\r\n                    </button>\r\n                </form>\r\n                <form onSubmit={e => this.props.onResetSubmit(e)}>\r\n                    <button type=\"submit\">\r\n                        Reset\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TurtleForm","import React from \"react\"\r\n\r\n/**\r\n * The header for the app.\r\n */\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div class=\"header\">\r\n                <span>Auto-Turtle </span><span class=\"no_italics\">🐢</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\nimport Canvas from \"./Canvas\"\r\nimport TurtleForm from \"./TurtleForm\"\r\nimport Header from \"./Header\"\r\n\r\n/**\r\n * Contains and handles interactions between the form and canvas.\r\n */\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // get the reference to the canvas\r\n        this.canvasRef = React.createRef()\r\n    }\r\n\r\n    /**\r\n     * Makes the canvas repeat the drawn pattern according to the options checked in the form.\r\n     * @param {React.FormEvent} formSubmitEvent\r\n     */\r\n    handleTurtleFormSubmit(formSubmitEvent) {\r\n        formSubmitEvent.preventDefault()\r\n\r\n        var target = formSubmitEvent.target\r\n        this.canvasRef.current.repeat(target[0].checked, target[1].checked)\r\n    }\r\n\r\n    /**\r\n     * Clears the canvas.\r\n     * @param {React.FormEvent} formSubmitEvent \r\n     */\r\n    handleResetFormSubmit(formSubmitEvent) {\r\n        formSubmitEvent.preventDefault()\r\n\r\n        this.canvasRef.current.clear()\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state)\r\n        return (\r\n            <div class=\"container\">\r\n                <Header />\r\n                <hr></hr>\r\n                <Canvas ref={this.canvasRef} />\r\n                <TurtleForm \r\n                    onTurtleSubmit={e => this.handleTurtleFormSubmit(e)}\r\n                    onResetSubmit={e => this.handleResetFormSubmit(e)} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n  );"],"sourceRoot":""}