{"version":3,"sources":["Canvas.js","Checkbox.js","TurtleForm.js","Header.js","App.js","index.js"],"names":["Canvas","props","state","points","x","y","canvasRef","React","createRef","ref","this","width","height","onMouseDown","e","handleMouseDown","m","nativeEvent","drawLine","length","offsetX","offsetY","addPoint","pts","setState","ix","iy","context","getContext","fillStyle","beginPath","moveTo","lineTo","stroke","initLength","r","angle","i","newPoint","rotateCenter","push","point","center","degrees","aboutOrigin","rotated","rotateOrigin","rads","Math","PI","sin","cos","clearRect","current","Component","Checkbox","label","isSelected","onCheckboxChange","type","name","checked","onChange","OPTIONS_CHECK","TurtleForm","checkboxes","reduce","options","option","handleCheckboxChange","changeEvent","target","prevState","map","createCheckbox","onSubmit","onTurtleSubmit","createForm","onResetSubmit","Header","class","App","increase","connectToCenter","formSubmitEvent","preventDefault","repeat","clear","console","log","handleTurtleFormSubmit","handleResetFormSubmit","ReactDOM","render","document","getElementById"],"mappings":"4NAuGeA,E,kDApGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,OAAQ,CAAC,CAAEC,EAAG,IAAKC,EAAG,OAG1B,EAAKC,UAAYC,IAAMC,YAPR,E,0CAUnB,WAAU,IAAD,OACL,OACI,wBAAQC,IAAKC,KAAKJ,UAAWK,MAAM,MAAMC,OAAO,MAC5CC,YAAa,SAAAC,GAAC,OAAI,EAAKC,gBAAgBD,Q,6BAKnD,SAAgBA,GACZ,IAAIE,EAAIF,EAAEG,YACJd,EAASO,KAAKR,MAAMC,OAC1BO,KAAKQ,SAASf,EAAOA,EAAOgB,OAAS,GAAGf,EAAGD,EAAOA,EAAOgB,OAAS,GAAGd,EAAGW,EAAEI,QAASJ,EAAEK,SACrFX,KAAKY,SAASN,EAAEI,QAASJ,EAAEK,W,sBAG/B,SAASjB,EAAGC,GACR,IAAMkB,EAAMb,KAAKR,MAAMC,OACvBO,KAAKc,SAAS,CACVrB,OAAO,GAAD,mBAAMoB,GAAN,CAAW,CAAEnB,EAAGA,EAAGC,EAAGA,S,sBAIpC,SAASoB,EAAIC,EAAItB,EAAGC,GAChB,IAAMsB,EAAUjB,KAAKkB,aACrBD,EAAQE,UAAY,UACpBF,EAAQG,YACRH,EAAQI,OAAON,EAAIC,GACnBC,EAAQK,OAAO5B,EAAGC,GAClBsB,EAAQM,W,oBAGZ,WACI,IACI9B,EAASO,KAAKR,MAAMC,OAClB+B,EAAa/B,EAAOgB,OAG1B,KAAIe,EAAa,KAAjB,CAGA,IAAK,IAAIC,EAAI,EAAGA,EARH,EAQaA,IAGtB,IADA,IAAIC,EAAQD,EAVH,EAUc,IACdE,EAAI,EAAGA,EAAIH,EAAYG,IAChC,CACI,IAAMC,EAAW5B,KAAK6B,aAAapC,EAAOkC,GAAIlC,EAAO,GAAIiC,GACrDC,EAAI,GAEJ3B,KAAKQ,SAASf,EAAOA,EAAOgB,OAAS,GAAGf,EAAGD,EAAOA,EAAOgB,OAAS,GAAGd,EAAGiC,EAASlC,EAAGkC,EAASjC,GAEjGF,EAAOqC,KAAK,CAAEpC,EAAGkC,EAASlC,EAAGC,EAAGiC,EAASjC,IAGjDK,KAAKc,SAAS,CACVrB,OAAQA,O,0BAIhB,SAAasC,EAAOC,EAAQC,GACxB,IAAMC,EAAc,CAAExC,EAAGqC,EAAMrC,EAAIsC,EAAOtC,EAAGC,EAAGoC,EAAMpC,EAAIqC,EAAOrC,GAC3DwC,EAAUnC,KAAKoC,aAAaF,EAAaD,GAC/C,MAAO,CAAEvC,EAAGyC,EAAQzC,EAAIsC,EAAOtC,EAAGC,EAAGwC,EAAQxC,EAAIqC,EAAOrC,K,0BAG5D,SAAaoC,EAAOE,GAChB,IAAMI,EAAOJ,EAAUK,KAAKC,GAAK,IAC3BC,EAAMF,KAAKE,IAAIH,GACfI,EAAMH,KAAKG,IAAIJ,GAErB,MAAO,CAAE3C,EAAGqC,EAAMrC,EAAI+C,EAAMV,EAAMpC,EAAI6C,EAAK7C,EAAGoC,EAAMrC,EAAI8C,EAAMT,EAAMpC,EAAI8C,K,mBAG5E,WACIzC,KAAKc,SAAS,CACVrB,OAAQ,CAAC,CAAEC,EAAG,IAAKC,EAAG,QAE1BK,KAAKkB,aAAawB,UAAU,EAAG,EAAG,IAAK,O,+BAG3C,c,wBAMA,WACI,OAAO1C,KAAKJ,UAAU+C,QAAQzB,WAAW,U,GAjG5BrB,IAAM+C,W,cCcZC,EAdE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,WAAYC,EAAtB,EAAsBA,iBAAtB,OACf,8BACE,kCACE,uBACEC,KAAK,WACLC,KAAMJ,EACNK,QAASJ,EACTK,SAAUJ,IAEXF,QCRDO,EAAgB,GA+EPC,E,kDA3EX,WAAY/D,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CAET+D,WAAYF,EAAcG,QACtB,SAACC,EAASC,GAAV,mBAAC,eACMD,GADP,kBAEKC,GAAS,MAEd,KAVO,E,kDAenB,SAAeA,GAAS,IAAD,OACnB,OACI,cAAC,EAAD,CACIZ,MAAOY,EACPX,WAAY/C,KAAKR,MAAM+D,WAAWG,GAClCV,iBAAkB,SAAA5C,GAAC,OAAI,EAAKuD,qBAAqBvD,KAC5CsD,K,kCAKjB,SAAqBE,GAAc,IACvBV,EAASU,EAAYC,OAArBX,KAGRlD,KAAKc,UAAS,SAAAgD,GAAS,MAAK,CACxBP,WAAW,2BACJO,EAAUP,YADP,kBAELL,GAAQY,EAAUP,WAAWL,W,wBAK1C,WAAc,IAAD,OACT,OAAOG,EAAcU,KAAI,SAAAL,GAAM,OAAI,EAAKM,eAAeN,Q,oBAgB3D,WAAU,IAAD,OACL,OACI,gCACI,uBAAMO,SAAU,SAAA7D,GAAC,OAAI,EAAKb,MAAM2E,eAAe9D,IAA/C,UACKJ,KAAKmE,aAEN,wBAAQlB,KAAK,SAAb,wBAIJ,sBAAMgB,SAAU,SAAA7D,GAAC,OAAI,EAAKb,MAAM6E,cAAchE,IAA9C,SACI,wBAAQ6C,KAAK,SAAb,4B,GAnEKpD,IAAM+C,WCYhByB,E,kDAfX,WAAY9E,GAAQ,uCACVA,G,0CAKV,WACI,OACI,sBAAK+E,MAAM,SAAX,UACI,gDAAyB,sBAAMA,MAAM,aAAZ,iC,GAVpBzE,IAAM+C,WCgDZ2B,E,kDA5CX,WAAYhF,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTgF,UAAU,EACVC,iBAAiB,GAGrB,EAAK7E,UAAYC,IAAMC,YARR,E,0DAWnB,SAAuB4E,GACnBA,EAAgBC,iBAEHD,EAAgBb,OAC7B7D,KAAKc,SAAS,IAKdd,KAAKJ,UAAU+C,QAAQiC,W,mCAG3B,SAAsBF,GAClBA,EAAgBC,iBAEhB3E,KAAKJ,UAAU+C,QAAQkC,U,oBAG3B,WAAU,IAAD,OAEL,OADAC,QAAQC,IAAI/E,KAAKR,OAEb,sBAAK8E,MAAM,YAAX,UACI,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,CAAQvE,IAAKC,KAAKJ,YAClB,cAAC,EAAD,CACIsE,eAAgB,SAAA9D,GAAC,OAAI,EAAK4E,uBAAuB5E,IACjDgE,cAAe,SAAAhE,GAAC,OAAI,EAAK6E,sBAAsB7E,a,GAvCjDP,IAAM+C,W,MCAxBsC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.534e3d9f.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nclass Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            points: [{ x: 250, y: 250 }]\r\n        }\r\n\r\n        this.canvasRef = React.createRef()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas ref={this.canvasRef} width=\"500\" height=\"500\" \r\n                onMouseDown={e => this.handleMouseDown(e)}\r\n            />\r\n        )\r\n    }\r\n\r\n    handleMouseDown(e) {\r\n        let m = e.nativeEvent\r\n        const points = this.state.points\r\n        this.drawLine(points[points.length - 1].x, points[points.length - 1].y, m.offsetX, m.offsetY)\r\n        this.addPoint(m.offsetX, m.offsetY)\r\n    }\r\n\r\n    addPoint(x, y) {\r\n        const pts = this.state.points\r\n        this.setState({\r\n            points: [...pts, { x: x, y: y }]\r\n        })\r\n    }\r\n\r\n    drawLine(ix, iy, x, y) {\r\n        const context = this.getContext()\r\n        context.fillStyle = \"#000000\"\r\n        context.beginPath()\r\n        context.moveTo(ix, iy)\r\n        context.lineTo(x, y)\r\n        context.stroke()\r\n    }\r\n    \r\n    repeat() {\r\n        const rots = 6\r\n        let points = this.state.points\r\n        const initLength = points.length\r\n\r\n        // return if the number of points is too high\r\n        if (initLength > 100)\r\n            return\r\n\r\n        for (var r = 1; r < rots; r++)\r\n        {\r\n            let angle = r / rots * 360\r\n            for (var i = 0; i < initLength; i++)\r\n            {\r\n                const newPoint = this.rotateCenter(points[i], points[0], angle)\r\n                if (i > 0)\r\n                {\r\n                    this.drawLine(points[points.length - 1].x, points[points.length - 1].y, newPoint.x, newPoint.y)\r\n                }\r\n                points.push({ x: newPoint.x, y: newPoint.y })\r\n            }\r\n        }\r\n        this.setState({\r\n            points: points\r\n        })\r\n    }\r\n\r\n    rotateCenter(point, center, degrees) {\r\n        const aboutOrigin = { x: point.x - center.x, y: point.y - center.y }\r\n        const rotated = this.rotateOrigin(aboutOrigin, degrees)\r\n        return { x: rotated.x + center.x, y: rotated.y + center.y } \r\n    }\r\n\r\n    rotateOrigin(point, degrees) {\r\n        const rads = degrees * Math.PI / 180\r\n        const sin = Math.sin(rads)\r\n        const cos = Math.cos(rads)\r\n        // point rotation about origin\r\n        return { x: point.x * cos - point.y * sin, y: point.x * sin + point.y * cos }\r\n    }\r\n\r\n    clear() {\r\n        this.setState({\r\n            points: [{ x: 250, y: 250 }]\r\n        })\r\n        this.getContext().clearRect(0, 0, 500, 500)\r\n    }\r\n\r\n    componentDidMount() {\r\n        //const context = this.getContext()\r\n        //context.fillStyle = \"#EEEEEE\"\r\n        //context.fillRect(0, 0, 500, 500)\r\n    }\r\n\r\n    getContext() {\r\n        return this.canvasRef.current.getContext(\"2d\")\r\n    }\r\n}\r\n\r\nexport default Canvas","import React from \"react\";\r\n\r\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\r\n  <div>\r\n    <label>\r\n      <input\r\n        type=\"checkbox\"\r\n        name={label}\r\n        checked={isSelected}\r\n        onChange={onCheckboxChange}\r\n      />\r\n      {label}\r\n    </label>\r\n  </div>\r\n);\r\n\r\nexport default Checkbox","import React from \"react\"\r\nimport Checkbox from \"./Checkbox\"\r\n\r\nconst OPTIONS_CHECK = []//[\"Increase\", \"Start from end\"]\r\n//const OPTIONS_NUMBER = [\"Repetitions\"]\r\n\r\nclass TurtleForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.state = {\r\n            // transforms [\"option1, option2\"] to [\"option1\": false, \"option2\": false]\r\n            checkboxes: OPTIONS_CHECK.reduce(\r\n                (options, option) => ({\r\n                    ...options,\r\n                    [option]: false\r\n                }),\r\n                {}\r\n            )\r\n        }\r\n    }\r\n\r\n    createCheckbox(option) {\r\n        return (\r\n            <Checkbox \r\n                label={option}\r\n                isSelected={this.state.checkboxes[option]}\r\n                onCheckboxChange={e => this.handleCheckboxChange(e)}\r\n                key={option}\r\n            />\r\n        )\r\n    }\r\n\r\n    handleCheckboxChange(changeEvent) {\r\n        const { name } = changeEvent.target\r\n\r\n        // changes the state of the clicked checkbox while preserving the others\r\n        this.setState(prevState => ({\r\n            checkboxes: {\r\n                ...prevState.checkboxes,\r\n                [name]: !prevState.checkboxes[name]\r\n            }\r\n        }))\r\n    }\r\n\r\n    createForm() {\r\n        return OPTIONS_CHECK.map(option => this.createCheckbox(option))\r\n    }\r\n\r\n    // handleFormSubmit(formSubmitEvent) {\r\n    //     formSubmitEvent.preventDefault()\r\n\r\n    //     // gets the names of the checkboxes\r\n    //     Object.keys(this.state.checkboxes)\r\n    //         // checks if they are checked\r\n    //         .filter(checkbox => this.state.checkboxes[checkbox])\r\n    //         // prints the checked ones\r\n    //         .forEach(checkbox => {\r\n    //             console.log(checkbox + \" is selected\")\r\n    //         })\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={e => this.props.onTurtleSubmit(e)}>\r\n                    {this.createForm()}\r\n\r\n                    <button type=\"submit\">\r\n                        Turtle!\r\n                    </button>\r\n                </form>\r\n                <form onSubmit={e => this.props.onResetSubmit(e)}>\r\n                    <button type=\"submit\">\r\n                        Reset\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TurtleForm","import React from \"react\"\r\n\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"header\">\r\n                <span>Auto-Turtle </span><span class=\"no_italics\">🐢</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\nimport Canvas from \"./Canvas\"\r\nimport TurtleForm from \"./TurtleForm\"\r\nimport Header from \"./Header\"\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            increase: false,\r\n            connectToCenter: false\r\n        }\r\n\r\n        this.canvasRef = React.createRef()\r\n    }\r\n\r\n    handleTurtleFormSubmit(formSubmitEvent) {\r\n        formSubmitEvent.preventDefault()\r\n\r\n        var target = formSubmitEvent.target\r\n        this.setState({\r\n            //increase: target[0].checked,\r\n            //connectToCenter: target[1].checked\r\n        })\r\n\r\n        this.canvasRef.current.repeat()\r\n    }\r\n\r\n    handleResetFormSubmit(formSubmitEvent) {\r\n        formSubmitEvent.preventDefault()\r\n\r\n        this.canvasRef.current.clear()\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state)\r\n        return (\r\n            <div class=\"container\">\r\n                <Header />\r\n                <hr></hr>\r\n                <Canvas ref={this.canvasRef} />\r\n                <TurtleForm \r\n                    onTurtleSubmit={e => this.handleTurtleFormSubmit(e)}\r\n                    onResetSubmit={e => this.handleResetFormSubmit(e)} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n  );"],"sourceRoot":""}